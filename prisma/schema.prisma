generator client {
  provider = "prisma-client-js"
   previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url = env("url")
}

model events {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(255)
  title      String    @db.VarChar(255)
  date       DateTime  @db.Date
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model notes {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(255)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([email])
}

model subtasks {
  id        Int      @id @default(autoincrement())
  todo_id   Int?
  text      String
  completed Boolean? @default(false)
  todos     todos?   @relation(fields: [todo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model todos {
  id        Int        @id @default(autoincrement())
  email     String     @db.VarChar(255)
  text      String
  completed Boolean    @default(false)
  position  Int?
  color     String?    @default("#ff7b00") @db.VarChar(7)
  subtasks  subtasks[]

  @@unique([id, email])
}

model tracks {
  id         Int    @id @default(autoincrement())
  user_email String @db.VarChar(255)
  title      String @db.VarChar(255)
  video_id   String @db.VarChar(255)
}

model user_pomodoros {
  email                 String  @id @db.VarChar(255)
  pomodoro_count        Int     @default(0)
  firstname             String? @db.VarChar(255)
  studying              Int?    @default(0)
  coding                Int?    @default(0)
  writing               Int?    @default(0)
  working               Int?    @default(0)
  other                 Int?    @default(0)
  daily_counts          Json?   @default("{}")
  pomodoro_count_weekly Int     @default(0)
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  email     String
  question  String
  answer    String
  color     String   @default("#ff7b00")
  imageUrl  String?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  rating    Int?     // 1-5 rating of how well the user knows the card
  lastReviewed DateTime? // When the card was last reviewed
  nextReview   DateTime? // When the card should be reviewed next (for spaced repetition)
  reviewCount  Int       @default(0) // Number of times the card has been reviewed
}

model Challenge {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      String
  total       Int
  type        String    // daily, weekly, monthly
  category    String    // focus, consistency, early_bird, etc.
  trackingType String   // pomodoro_daily, category_count, etc.
  timeRequirement Json? // For time-based challenges
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    Progress[]
  
  @@unique([title, type])
}

model Progress {
  id          String    @id @default(cuid())
  email       String
  challengeId String
  progress    Int
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  
  @@unique([email, challengeId])
}

model TutorialState {
  id        Int      @id @default(autoincrement())
  email     String
  tutorial  String   // Identifier for the tutorial (e.g., "background_prompt")
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, tutorial])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  email     String
  message   String   @db.Text
  status    String   @default("pending") // pending, reviewed, responded
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @default(now()) @updatedAt @map("updatedat")
  response  String?  @db.Text
  
  @@index([email])
  @@index([status])
  
  @@map("feedback")
}
